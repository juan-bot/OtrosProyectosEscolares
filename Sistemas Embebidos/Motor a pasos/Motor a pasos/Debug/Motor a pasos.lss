
Motor a pasos.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000158  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000075b  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006aa  00000000  00000000  00000997  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000367  00000000  00000000  00001041  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000013a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039d  00000000  00000000  000013cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000057  00000000  00000000  00001769  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000017c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  68:	66 00       	.word	0x0066	; ????
  6a:	6b 00       	.word	0x006b	; ????
  6c:	70 00       	.word	0x0070	; ????
  6e:	75 00       	.word	0x0075	; ????
  70:	7a 00       	.word	0x007a	; ????
  72:	7f 00       	.word	0x007f	; ????
  74:	84 00       	.word	0x0084	; ????
  76:	89 00       	.word	0x0089	; ????

00000078 <__ctors_end>:
  78:	11 24       	eor	r1, r1
  7a:	1f be       	out	0x3f, r1	; 63
  7c:	cf ef       	ldi	r28, 0xFF	; 255
  7e:	d8 e0       	ldi	r29, 0x08	; 8
  80:	de bf       	out	0x3e, r29	; 62
  82:	cd bf       	out	0x3d, r28	; 61
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 aa 00 	jmp	0x154	; 0x154 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:


int main(void){
	enum {E1 , E2 , E3,E4 , E5 , E6 , E7,E8} estado ;
	uint8_t c1,c0;
	DDRB=0XFF;
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	84 b9       	out	0x04, r24	; 4
	DDRC=0X00;
  94:	17 b8       	out	0x07, r1	; 7
	estado=E1;
  96:	e0 e0       	ldi	r30, 0x00	; 0
						estado=E8;
					else
						estado=E6;
				break;
				case E8:
					PORTB=0x09;
  98:	0f 2e       	mov	r0, r31
  9a:	f9 e0       	ldi	r31, 0x09	; 9
  9c:	ef 2e       	mov	r14, r31
  9e:	f0 2d       	mov	r31, r0
					if(c0==0)
						estado=E1;
  a0:	f1 2c       	mov	r15, r1
					else
						estado=E7;
  a2:	b6 e0       	ldi	r27, 0x06	; 6
						estado=E7;
					else
						estado=E5;
				break;
				case E7:
					PORTB=0x08;
  a4:	08 e0       	ldi	r16, 0x08	; 8
					if(c0==0)
						estado=E8;
  a6:	17 e0       	ldi	r17, 0x07	; 7
					else
						estado=E6;
  a8:	d5 e0       	ldi	r29, 0x05	; 5
						estado=E6;
					else
						estado=E4;
				break;
				case E6:
					PORTB=0x0C;
  aa:	cc e0       	ldi	r28, 0x0C	; 12
					if(c0==0)
						estado=E7;
					else
						estado=E5;
  ac:	a4 e0       	ldi	r26, 0x04	; 4
				case E5:
					PORTB=0x04;
					if(c0==0)
						estado=E6;
					else
						estado=E4;
  ae:	33 e0       	ldi	r19, 0x03	; 3
				case E4:
					PORTB=0x06;
					if(c0==0)
						estado=E5;
					else
						estado=E3;
  b0:	22 e0       	ldi	r18, 0x02	; 2
				case E3:
					PORTB=0x02;
					if(c0==0)
						estado=E4;
					else
						estado=E2;
  b2:	dd 24       	eor	r13, r13
  b4:	d3 94       	inc	r13
	uint8_t c1,c0;
	DDRB=0XFF;
	DDRC=0X00;
	estado=E1;
	while(1){
		c0 = PINC & 0X01;
  b6:	86 b1       	in	r24, 0x06	; 6
		c1 = PINC & 0X02;
		if(c1==0){
  b8:	31 99       	sbic	0x06, 1	; 6
  ba:	fd cf       	rjmp	.-6      	; 0xb6 <main+0x26>
	uint8_t c1,c0;
	DDRB=0XFF;
	DDRC=0X00;
	estado=E1;
	while(1){
		c0 = PINC & 0X01;
  bc:	81 70       	andi	r24, 0x01	; 1
		c1 = PINC & 0X02;
		if(c1==0){
			switch(estado){
  be:	4e 2f       	mov	r20, r30
  c0:	50 e0       	ldi	r21, 0x00	; 0
  c2:	fa 01       	movw	r30, r20
  c4:	ec 5c       	subi	r30, 0xCC	; 204
  c6:	ff 4f       	sbci	r31, 0xFF	; 255
  c8:	0c 94 a4 00 	jmp	0x148	; 0x148 <__tablejump2__>
				case E1:
					PORTB = 0x01;
  cc:	d5 b8       	out	0x05, r13	; 5
					if(c0 == 0)
  ce:	88 23       	and	r24, r24
  d0:	29 f1       	breq	.+74     	; 0x11c <main+0x8c>
						estado = E2;
					else
						estado = E8;
  d2:	e1 2f       	mov	r30, r17
  d4:	32 c0       	rjmp	.+100    	; 0x13a <main+0xaa>
				break;
				case E2:
					PORTB = 0x03;
  d6:	35 b9       	out	0x05, r19	; 5
					if(c0 == 0)
  d8:	88 23       	and	r24, r24
  da:	11 f1       	breq	.+68     	; 0x120 <main+0x90>
						estado = E3;
					else
						estado = E1;
  dc:	ef 2d       	mov	r30, r15
  de:	2d c0       	rjmp	.+90     	; 0x13a <main+0xaa>
				break;
				case E3:
					PORTB=0x02;
  e0:	25 b9       	out	0x05, r18	; 5
					if(c0==0)
  e2:	88 23       	and	r24, r24
  e4:	f9 f0       	breq	.+62     	; 0x124 <main+0x94>
						estado=E4;
					else
						estado=E2;
  e6:	ed 2d       	mov	r30, r13
  e8:	28 c0       	rjmp	.+80     	; 0x13a <main+0xaa>
				break;
				case E4:
					PORTB=0x06;
  ea:	b5 b9       	out	0x05, r27	; 5
					if(c0==0)
  ec:	88 23       	and	r24, r24
  ee:	e1 f0       	breq	.+56     	; 0x128 <main+0x98>
						estado=E5;
					else
						estado=E3;
  f0:	e2 2f       	mov	r30, r18
  f2:	23 c0       	rjmp	.+70     	; 0x13a <main+0xaa>
				break;
				case E5:
					PORTB=0x04;
  f4:	a5 b9       	out	0x05, r26	; 5
					if(c0==0)
  f6:	88 23       	and	r24, r24
  f8:	c9 f0       	breq	.+50     	; 0x12c <main+0x9c>
						estado=E6;
					else
						estado=E4;
  fa:	e3 2f       	mov	r30, r19
  fc:	1e c0       	rjmp	.+60     	; 0x13a <main+0xaa>
				break;
				case E6:
					PORTB=0x0C;
  fe:	c5 b9       	out	0x05, r28	; 5
					if(c0==0)
 100:	88 23       	and	r24, r24
 102:	b1 f0       	breq	.+44     	; 0x130 <main+0xa0>
						estado=E7;
					else
						estado=E5;
 104:	ea 2f       	mov	r30, r26
 106:	19 c0       	rjmp	.+50     	; 0x13a <main+0xaa>
				break;
				case E7:
					PORTB=0x08;
 108:	05 b9       	out	0x05, r16	; 5
					if(c0==0)
 10a:	88 23       	and	r24, r24
 10c:	99 f0       	breq	.+38     	; 0x134 <main+0xa4>
						estado=E8;
					else
						estado=E6;
 10e:	ed 2f       	mov	r30, r29
 110:	14 c0       	rjmp	.+40     	; 0x13a <main+0xaa>
				break;
				case E8:
					PORTB=0x09;
 112:	e5 b8       	out	0x05, r14	; 5
					if(c0==0)
 114:	88 23       	and	r24, r24
 116:	81 f0       	breq	.+32     	; 0x138 <main+0xa8>
						estado=E1;
					else
						estado=E7;
 118:	eb 2f       	mov	r30, r27
 11a:	0f c0       	rjmp	.+30     	; 0x13a <main+0xaa>
		if(c1==0){
			switch(estado){
				case E1:
					PORTB = 0x01;
					if(c0 == 0)
						estado = E2;
 11c:	ed 2d       	mov	r30, r13
 11e:	0d c0       	rjmp	.+26     	; 0x13a <main+0xaa>
						estado = E8;
				break;
				case E2:
					PORTB = 0x03;
					if(c0 == 0)
						estado = E3;
 120:	e2 2f       	mov	r30, r18
 122:	0b c0       	rjmp	.+22     	; 0x13a <main+0xaa>
						estado = E1;
				break;
				case E3:
					PORTB=0x02;
					if(c0==0)
						estado=E4;
 124:	e3 2f       	mov	r30, r19
 126:	09 c0       	rjmp	.+18     	; 0x13a <main+0xaa>
						estado=E2;
				break;
				case E4:
					PORTB=0x06;
					if(c0==0)
						estado=E5;
 128:	ea 2f       	mov	r30, r26
 12a:	07 c0       	rjmp	.+14     	; 0x13a <main+0xaa>
						estado=E3;
				break;
				case E5:
					PORTB=0x04;
					if(c0==0)
						estado=E6;
 12c:	ed 2f       	mov	r30, r29
 12e:	05 c0       	rjmp	.+10     	; 0x13a <main+0xaa>
						estado=E4;
				break;
				case E6:
					PORTB=0x0C;
					if(c0==0)
						estado=E7;
 130:	eb 2f       	mov	r30, r27
 132:	03 c0       	rjmp	.+6      	; 0x13a <main+0xaa>
						estado=E5;
				break;
				case E7:
					PORTB=0x08;
					if(c0==0)
						estado=E8;
 134:	e1 2f       	mov	r30, r17
 136:	01 c0       	rjmp	.+2      	; 0x13a <main+0xaa>
						estado=E6;
				break;
				case E8:
					PORTB=0x09;
					if(c0==0)
						estado=E1;
 138:	ef 2d       	mov	r30, r15
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13a:	87 ea       	ldi	r24, 0xA7	; 167
 13c:	91 e6       	ldi	r25, 0x61	; 97
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <main+0xae>
 142:	00 c0       	rjmp	.+0      	; 0x144 <main+0xb4>
 144:	00 00       	nop
 146:	b7 cf       	rjmp	.-146    	; 0xb6 <main+0x26>

00000148 <__tablejump2__>:
 148:	ee 0f       	add	r30, r30
 14a:	ff 1f       	adc	r31, r31
 14c:	05 90       	lpm	r0, Z+
 14e:	f4 91       	lpm	r31, Z
 150:	e0 2d       	mov	r30, r0
 152:	09 94       	ijmp

00000154 <_exit>:
 154:	f8 94       	cli

00000156 <__stop_program>:
 156:	ff cf       	rjmp	.-2      	; 0x156 <__stop_program>
