
Comparador.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000b0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000104  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000134  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000693  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000607  00000000  00000000  00000827  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000220  00000000  00000000  00000e2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001050  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000345  00000000  00000000  00001074  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  000013b9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 56 00 	jmp	0xac	; 0xac <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>
#include <util/delay.h>

int main(void){
	uint8_t a,b;
	DDRC=0X00;
  80:	17 b8       	out	0x07, r1	; 7
	DDRD=0X00;
  82:	1a b8       	out	0x0a, r1	; 10
	DDRB=0XFF;
  84:	8f ef       	ldi	r24, 0xFF	; 255
  86:	84 b9       	out	0x04, r24	; 4
	PORTB=0X00;
  88:	15 b8       	out	0x05, r1	; 5
		}
		else if(a==b){
			PORTB=0X02;
		}	
		else{
			PORTB=0X04;	
  8a:	34 e0       	ldi	r19, 0x04	; 4
		b=PIND & 0x0F;
		if(a>b){
			PORTB=0X01;
		}
		else if(a==b){
			PORTB=0X02;
  8c:	42 e0       	ldi	r20, 0x02	; 2
	PORTB=0X00;
	while (1){
		a=PINC & 0x0F;
		b=PIND & 0x0F;
		if(a>b){
			PORTB=0X01;
  8e:	21 e0       	ldi	r18, 0x01	; 1
	DDRC=0X00;
	DDRD=0X00;
	DDRB=0XFF;
	PORTB=0X00;
	while (1){
		a=PINC & 0x0F;
  90:	96 b1       	in	r25, 0x06	; 6
  92:	9f 70       	andi	r25, 0x0F	; 15
		b=PIND & 0x0F;
  94:	89 b1       	in	r24, 0x09	; 9
  96:	8f 70       	andi	r24, 0x0F	; 15
		if(a>b){
  98:	89 17       	cp	r24, r25
  9a:	10 f4       	brcc	.+4      	; 0xa0 <main+0x20>
			PORTB=0X01;
  9c:	25 b9       	out	0x05, r18	; 5
  9e:	f8 cf       	rjmp	.-16     	; 0x90 <main+0x10>
		}
		else if(a==b){
  a0:	98 13       	cpse	r25, r24
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <main+0x28>
			PORTB=0X02;
  a4:	45 b9       	out	0x05, r20	; 5
  a6:	f4 cf       	rjmp	.-24     	; 0x90 <main+0x10>
		}	
		else{
			PORTB=0X04;	
  a8:	35 b9       	out	0x05, r19	; 5
  aa:	f2 cf       	rjmp	.-28     	; 0x90 <main+0x10>

000000ac <_exit>:
  ac:	f8 94       	cli

000000ae <__stop_program>:
  ae:	ff cf       	rjmp	.-2      	; 0xae <__stop_program>
