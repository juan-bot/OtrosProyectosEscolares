
tonoVariable.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000168  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001dc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000020c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006c5  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000621  00000000  00000000  00000941  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002a4  00000000  00000000  00000f62  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  00001208  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000036d  00000000  00000000  00001270  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000085  00000000  00000000  000015dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001662  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__vector_9>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 90 00 	call	0x120	; 0x120 <main>
  88:	0c 94 b2 00 	jmp	0x164	; 0x164 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_1>:
#include <avr/io.h>
#include <avr/interrupt.h>

uint8_t tono=0;
ISR(INT0_vect){
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
	if(!(PIND &0X04)){
  9c:	4a 99       	sbic	0x09, 2	; 9
  9e:	07 c0       	rjmp	.+14     	; 0xae <__vector_1+0x1e>
		TCCR1B=0X09;
  a0:	89 e0       	ldi	r24, 0x09	; 9
  a2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
		TCCR2B=0X04;
  a6:	84 e0       	ldi	r24, 0x04	; 4
  a8:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
  ac:	0b c0       	rjmp	.+22     	; 0xc4 <__vector_1+0x34>
	}
	else{
		PORTB=0X00;
  ae:	15 b8       	out	0x05, r1	; 5
		TCCR1B=0X00;
  b0:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
		TCCR2B=0X00;
  b4:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
		TCNT1=0;
  b8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
  bc:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
		TCNT2=0;
  c0:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__DATA_REGION_ORIGIN__+0x52>
	}
}
  c4:	8f 91       	pop	r24
  c6:	0f 90       	pop	r0
  c8:	0f be       	out	0x3f, r0	; 63
  ca:	0f 90       	pop	r0
  cc:	1f 90       	pop	r1
  ce:	18 95       	reti

000000d0 <__vector_9>:
ISR(TIMER2_OVF_vect){
  d0:	1f 92       	push	r1
  d2:	0f 92       	push	r0
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	0f 92       	push	r0
  d8:	11 24       	eor	r1, r1
  da:	8f 93       	push	r24
  dc:	9f 93       	push	r25
	if(tono==0){
  de:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  e2:	81 11       	cpse	r24, r1
  e4:	0e c0       	rjmp	.+28     	; 0x102 <__vector_9+0x32>
		TCNT1=0;
  e6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
  ea:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
		OCR1A=567;
  ee:	87 e3       	ldi	r24, 0x37	; 55
  f0:	92 e0       	ldi	r25, 0x02	; 2
  f2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
  f6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
		tono=1;
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 100:	08 c0       	rjmp	.+16     	; 0x112 <__vector_9+0x42>
	}
	else{
		OCR1A=1135;
 102:	8f e6       	ldi	r24, 0x6F	; 111
 104:	94 e0       	ldi	r25, 0x04	; 4
 106:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 10a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
		tono=0;
 10e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	}
}
 112:	9f 91       	pop	r25
 114:	8f 91       	pop	r24
 116:	0f 90       	pop	r0
 118:	0f be       	out	0x3f, r0	; 63
 11a:	0f 90       	pop	r0
 11c:	1f 90       	pop	r1
 11e:	18 95       	reti

00000120 <main>:


int main(void){
    DDRB = 0x02 ; // Salida para OC1A 
 120:	82 e0       	ldi	r24, 0x02	; 2
 122:	84 b9       	out	0x04, r24	; 4
	DDRD = 0x00 ; // Entrada para el boto´n 
 124:	1a b8       	out	0x0a, r1	; 10
	PORTD = 0xFF;
 126:	8f ef       	ldi	r24, 0xFF	; 255
 128:	8b b9       	out	0x0b, r24	; 11
    // Configuracio´n de la interrupcio´n externa 0 
	EICRA = 0x01 ; // Cualquier cambio en PD2 
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
	EIMSK = 0x01 ;
 130:	8d bb       	out	0x1d, r24	; 29
    // Configuracio´n del temporizador 1 
	OCR1A = 1135; // Iniciar ´a con 440 Hz 
 132:	2f e6       	ldi	r18, 0x6F	; 111
 134:	34 e0       	ldi	r19, 0x04	; 4
 136:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 13a:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	TCCR1A = 0x40 ; // Respuesta autom´a tica 
 13e:	90 e4       	ldi	r25, 0x40	; 64
 140:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	TCCR1B = 0x00 ; // Inicia sin reloj 
 144:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	TCCR1C = 0x00 ;
 148:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__DATA_REGION_ORIGIN__+0x22>
    // Configuracio´n del temporizador 2 
	ASSR = 0x20 ; // Cristal externo de 32.768 KHz 
 14c:	90 e2       	ldi	r25, 0x20	; 32
 14e:	90 93 b6 00 	sts	0x00B6, r25	; 0x8000b6 <__DATA_REGION_ORIGIN__+0x56>
	TCCR2A = 0x00 ; TCCR2B = 0x00 ; // Inicia sin reloj 
 152:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
 156:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
	TIMSK2 = 0x01 ; // Interrupci´on por desbordamiento
 15a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__DATA_REGION_ORIGIN__+0x10>
    sei ();
 15e:	78 94       	sei
    while (1) {
		asm("NOP" );
 160:	00 00       	nop
 162:	fe cf       	rjmp	.-4      	; 0x160 <main+0x40>

00000164 <_exit>:
 164:	f8 94       	cli

00000166 <__stop_program>:
 166:	ff cf       	rjmp	.-2      	; 0x166 <__stop_program>
