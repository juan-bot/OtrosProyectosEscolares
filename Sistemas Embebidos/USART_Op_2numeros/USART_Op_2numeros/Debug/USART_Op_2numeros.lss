
USART_Op_2numeros.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000380  00000414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000380  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800110  00800110  00000424  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000424  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000454  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000494  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000833  00000000  00000000  000004cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006a8  00000000  00000000  00000cff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000371  00000000  00000000  000013a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b4  00000000  00000000  00001718  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000399  00000000  00000000  000017cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001db  00000000  00000000  00001b65  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001d40  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e8       	ldi	r30, 0x80	; 128
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 31       	cpi	r26, 0x19	; 25
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 be 01 	jmp	0x37c	; 0x37c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
			}
		}
	}
}
int main(void){
	DDRD = 0x02 ; // RXD es entrada y TXD es salida
  a6:	82 e0       	ldi	r24, 0x02	; 2
  a8:	8a b9       	out	0x0a, r24	; 10
	UBRR0 = 103; // Para 9600 bps con el MCU
  aa:	87 e6       	ldi	r24, 0x67	; 103
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
  b2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	// trabajando a 16 MHz
	UCSR0A = 0x00 ; // As?ncrono normal
  b6:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
	UCSR0B = 0x98 ; // Habilita transmisor y receptor
  ba:	88 e9       	ldi	r24, 0x98	; 152
  bc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	UCSR0C = 0x06 ; // Datos de 8 bits , sin paridad y 1 bit de paro
  c0:	86 e0       	ldi	r24, 0x06	; 6
  c2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
	sei (); // Habilitador global de interrupciones
  c6:	78 94       	sei
	while (1)
	asm("NOP");
  c8:	00 00       	nop
  ca:	fe cf       	rjmp	.-4      	; 0xc8 <main+0x22>

000000cc <envia_numero>:
}


void envia_numero ( uint16_t num) {
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
  d0:	ec 01       	movw	r28, r24
	uint8_t aux ;
	if (num >= 10)
  d2:	8a 30       	cpi	r24, 0x0A	; 10
  d4:	91 05       	cpc	r25, r1
  d6:	68 f0       	brcs	.+26     	; 0xf2 <envia_numero+0x26>
	envia_numero (num/10); // Llamada recursiva
  d8:	9c 01       	movw	r18, r24
  da:	ad ec       	ldi	r26, 0xCD	; 205
  dc:	bc ec       	ldi	r27, 0xCC	; 204
  de:	0e 94 af 01 	call	0x35e	; 0x35e <__umulhisi3>
  e2:	96 95       	lsr	r25
  e4:	87 95       	ror	r24
  e6:	96 95       	lsr	r25
  e8:	87 95       	ror	r24
  ea:	96 95       	lsr	r25
  ec:	87 95       	ror	r24
  ee:	0e 94 66 00 	call	0xcc	; 0xcc <envia_numero>
	aux = num % 10;
  f2:	9e 01       	movw	r18, r28
  f4:	ad ec       	ldi	r26, 0xCD	; 205
  f6:	bc ec       	ldi	r27, 0xCC	; 204
  f8:	0e 94 af 01 	call	0x35e	; 0x35e <__umulhisi3>
  fc:	96 95       	lsr	r25
  fe:	87 95       	ror	r24
 100:	96 95       	lsr	r25
 102:	87 95       	ror	r24
 104:	96 95       	lsr	r25
 106:	87 95       	ror	r24
 108:	9c 01       	movw	r18, r24
 10a:	22 0f       	add	r18, r18
 10c:	33 1f       	adc	r19, r19
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	88 0f       	add	r24, r24
 114:	99 1f       	adc	r25, r25
 116:	88 0f       	add	r24, r24
 118:	99 1f       	adc	r25, r25
 11a:	82 0f       	add	r24, r18
 11c:	93 1f       	adc	r25, r19
 11e:	c8 1b       	sub	r28, r24
 120:	d9 0b       	sbc	r29, r25
	while (!(UCSR0A & 1 << UDRE0)); // Asegura buffer vacio
 122:	e0 ec       	ldi	r30, 0xC0	; 192
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	90 81       	ld	r25, Z
 128:	95 ff       	sbrs	r25, 5
 12a:	fd cf       	rjmp	.-6      	; 0x126 <envia_numero+0x5a>
	UDR0 = aux + 0x030 ;//envia el numero correcto
 12c:	c0 5d       	subi	r28, 0xD0	; 208
 12e:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
}
 132:	df 91       	pop	r29
 134:	cf 91       	pop	r28
 136:	08 95       	ret

00000138 <envia_cadena>:
void envia_cadena (char cad [ ] ) {
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
 13c:	ec 01       	movw	r28, r24
	uint8_t i=0;
	while(cad[i]!='\0') {//recorre la cadena hasta encontrar el caracter de fin
 13e:	28 81       	ld	r18, Y
 140:	22 23       	and	r18, r18
 142:	89 f0       	breq	.+34     	; 0x166 <envia_cadena+0x2e>
 144:	30 e0       	ldi	r19, 0x00	; 0
		while (!(UCSR0A & 1 << UDRE0)); // Asegura buffer vacío
 146:	e0 ec       	ldi	r30, 0xC0	; 192
 148:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = cad [i] ; // Envia un caracter a la vez
 14a:	46 ec       	ldi	r20, 0xC6	; 198
 14c:	50 e0       	ldi	r21, 0x00	; 0
	UDR0 = aux + 0x030 ;//envia el numero correcto
}
void envia_cadena (char cad [ ] ) {
	uint8_t i=0;
	while(cad[i]!='\0') {//recorre la cadena hasta encontrar el caracter de fin
		while (!(UCSR0A & 1 << UDRE0)); // Asegura buffer vacío
 14e:	90 81       	ld	r25, Z
 150:	95 ff       	sbrs	r25, 5
 152:	fd cf       	rjmp	.-6      	; 0x14e <envia_cadena+0x16>
		UDR0 = cad [i] ; // Envia un caracter a la vez
 154:	da 01       	movw	r26, r20
 156:	2c 93       	st	X, r18
		i++;			//incrementa el indice para evaluar el sig caracter
 158:	3f 5f       	subi	r19, 0xFF	; 255
	while (!(UCSR0A & 1 << UDRE0)); // Asegura buffer vacio
	UDR0 = aux + 0x030 ;//envia el numero correcto
}
void envia_cadena (char cad [ ] ) {
	uint8_t i=0;
	while(cad[i]!='\0') {//recorre la cadena hasta encontrar el caracter de fin
 15a:	de 01       	movw	r26, r28
 15c:	a3 0f       	add	r26, r19
 15e:	b1 1d       	adc	r27, r1
 160:	2c 91       	ld	r18, X
 162:	21 11       	cpse	r18, r1
 164:	f4 cf       	rjmp	.-24     	; 0x14e <envia_cadena+0x16>
		while (!(UCSR0A & 1 << UDRE0)); // Asegura buffer vacío
		UDR0 = cad [i] ; // Envia un caracter a la vez
		i++;			//incrementa el indice para evaluar el sig caracter
	}
 166:	df 91       	pop	r29
 168:	cf 91       	pop	r28
 16a:	08 95       	ret

0000016c <__vector_18>:
#include <avr/interrupt.h>
uint16_t A = 0 , B = 0 , Res,operacion;
uint8_t bandera = 0;
void envia_numero ( uint16_t num);	//prototipo de funcion
void envia_cadena (char cad [ ] ) ;	//prototipo de funcion
ISR(USART_RX_vect){
 16c:	1f 92       	push	r1
 16e:	0f 92       	push	r0
 170:	0f b6       	in	r0, 0x3f	; 63
 172:	0f 92       	push	r0
 174:	11 24       	eor	r1, r1
 176:	2f 93       	push	r18
 178:	3f 93       	push	r19
 17a:	4f 93       	push	r20
 17c:	5f 93       	push	r21
 17e:	6f 93       	push	r22
 180:	7f 93       	push	r23
 182:	8f 93       	push	r24
 184:	9f 93       	push	r25
 186:	af 93       	push	r26
 188:	bf 93       	push	r27
 18a:	ef 93       	push	r30
 18c:	ff 93       	push	r31
	uint8_t dato;
	dato = UDR0;
 18e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
	if (bandera == 0) { // condicion para leer el primer numero
 192:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <__data_end>
 196:	91 11       	cpse	r25, r1
 198:	20 c0       	rjmp	.+64     	; 0x1da <__vector_18+0x6e>
		if (dato >= 0x30 && dato <= 0x39) //encontro un numero
 19a:	90 ed       	ldi	r25, 0xD0	; 208
 19c:	98 0f       	add	r25, r24
 19e:	9a 30       	cpi	r25, 0x0A	; 10
 1a0:	c0 f4       	brcc	.+48     	; 0x1d2 <__vector_18+0x66>
			A = (A*10) + (dato-0x30 );	//transforma los caracteres a un numero
 1a2:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <A>
 1a6:	30 91 14 01 	lds	r19, 0x0114	; 0x800114 <A+0x1>
 1aa:	a9 01       	movw	r20, r18
 1ac:	44 0f       	add	r20, r20
 1ae:	55 1f       	adc	r21, r21
 1b0:	22 0f       	add	r18, r18
 1b2:	33 1f       	adc	r19, r19
 1b4:	22 0f       	add	r18, r18
 1b6:	33 1f       	adc	r19, r19
 1b8:	22 0f       	add	r18, r18
 1ba:	33 1f       	adc	r19, r19
 1bc:	24 0f       	add	r18, r20
 1be:	35 1f       	adc	r19, r21
 1c0:	28 0f       	add	r18, r24
 1c2:	31 1d       	adc	r19, r1
 1c4:	20 53       	subi	r18, 0x30	; 48
 1c6:	31 09       	sbc	r19, r1
 1c8:	30 93 14 01 	sts	0x0114, r19	; 0x800114 <A+0x1>
 1cc:	20 93 13 01 	sts	0x0113, r18	; 0x800113 <A>
 1d0:	b5 c0       	rjmp	.+362    	; 0x33c <__vector_18+0x1d0>
		else
			bandera = 1; //asegura que no leea el primer numero si no lo introdujo
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
 1d8:	b1 c0       	rjmp	.+354    	; 0x33c <__vector_18+0x1d0>
	}
	else {	// condicion para leer el segundo numero
		if (dato >= 0x30 && dato <= 0x39)//encontro un numero
 1da:	20 ed       	ldi	r18, 0xD0	; 208
 1dc:	28 0f       	add	r18, r24
 1de:	2a 30       	cpi	r18, 0x0A	; 10
 1e0:	c0 f4       	brcc	.+48     	; 0x212 <__vector_18+0xa6>
		B = (B*10) + (dato-0x30 );
 1e2:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <B>
 1e6:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <B+0x1>
 1ea:	a9 01       	movw	r20, r18
 1ec:	44 0f       	add	r20, r20
 1ee:	55 1f       	adc	r21, r21
 1f0:	22 0f       	add	r18, r18
 1f2:	33 1f       	adc	r19, r19
 1f4:	22 0f       	add	r18, r18
 1f6:	33 1f       	adc	r19, r19
 1f8:	22 0f       	add	r18, r18
 1fa:	33 1f       	adc	r19, r19
 1fc:	24 0f       	add	r18, r20
 1fe:	35 1f       	adc	r19, r21
 200:	28 0f       	add	r18, r24
 202:	31 1d       	adc	r19, r1
 204:	20 53       	subi	r18, 0x30	; 48
 206:	31 09       	sbc	r19, r1
 208:	30 93 12 01 	sts	0x0112, r19	; 0x800112 <B+0x1>
 20c:	20 93 11 01 	sts	0x0111, r18	; 0x800111 <B>
 210:	95 c0       	rjmp	.+298    	; 0x33c <__vector_18+0x1d0>
		else { // condicion para leer el operador
			if ((dato == 0x2A || dato == 0x2B || dato == 0x2D) && bandera==1){
 212:	26 ed       	ldi	r18, 0xD6	; 214
 214:	28 0f       	add	r18, r24
 216:	22 30       	cpi	r18, 0x02	; 2
 218:	10 f0       	brcs	.+4      	; 0x21e <__vector_18+0xb2>
 21a:	8d 32       	cpi	r24, 0x2D	; 45
 21c:	59 f4       	brne	.+22     	; 0x234 <__vector_18+0xc8>
 21e:	91 30       	cpi	r25, 0x01	; 1
 220:	49 f4       	brne	.+18     	; 0x234 <__vector_18+0xc8>
				operacion=dato;//guarda el codigo del operador
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <operacion+0x1>
 228:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <operacion>
				bandera=2; //asegura que ya no lea otro operador despues de encontrar uno 
 22c:	82 e0       	ldi	r24, 0x02	; 2
 22e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
 232:	84 c0       	rjmp	.+264    	; 0x33c <__vector_18+0x1d0>
			}
			else if(bandera==2){//si ya se tiene la operacion a hacer
 234:	92 30       	cpi	r25, 0x02	; 2
 236:	09 f0       	breq	.+2      	; 0x23a <__vector_18+0xce>
 238:	81 c0       	rjmp	.+258    	; 0x33c <__vector_18+0x1d0>
				envia_numero (A);//envia el primer operando para transformarlo
 23a:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <A>
 23e:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <A+0x1>
 242:	0e 94 66 00 	call	0xcc	; 0xcc <envia_numero>
				if(operacion==0x2A){//si la operacion es multiplicacion
 246:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <operacion>
 24a:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <operacion+0x1>
 24e:	8a 97       	sbiw	r24, 0x2a	; 42
 250:	b9 f4       	brne	.+46     	; 0x280 <__vector_18+0x114>
					envia_cadena (" * ");//envia el caracter * para transformarlo
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	91 e0       	ldi	r25, 0x01	; 1
 256:	0e 94 9c 00 	call	0x138	; 0x138 <envia_cadena>
					Res = A * B; //calcula el resultado de la operacion
 25a:	40 91 13 01 	lds	r20, 0x0113	; 0x800113 <A>
 25e:	50 91 14 01 	lds	r21, 0x0114	; 0x800114 <A+0x1>
 262:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <B>
 266:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <B+0x1>
 26a:	42 9f       	mul	r20, r18
 26c:	c0 01       	movw	r24, r0
 26e:	43 9f       	mul	r20, r19
 270:	90 0d       	add	r25, r0
 272:	52 9f       	mul	r21, r18
 274:	90 0d       	add	r25, r0
 276:	11 24       	eor	r1, r1
 278:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <Res+0x1>
 27c:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <Res>
				}
				if(operacion==0x2B){//si la operacion es suma
 280:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <operacion>
 284:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <operacion+0x1>
 288:	8b 97       	sbiw	r24, 0x2b	; 43
 28a:	91 f4       	brne	.+36     	; 0x2b0 <__vector_18+0x144>
					envia_cadena (" + ");//envia el caracter + para transformarlo
 28c:	84 e0       	ldi	r24, 0x04	; 4
 28e:	91 e0       	ldi	r25, 0x01	; 1
 290:	0e 94 9c 00 	call	0x138	; 0x138 <envia_cadena>
					Res = A + B;//calcula el resultado de la operacion
 294:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <A>
 298:	30 91 14 01 	lds	r19, 0x0114	; 0x800114 <A+0x1>
 29c:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <B>
 2a0:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <B+0x1>
 2a4:	82 0f       	add	r24, r18
 2a6:	93 1f       	adc	r25, r19
 2a8:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <Res+0x1>
 2ac:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <Res>
				}
				if(operacion==0x2D){//si la operacion es resta
 2b0:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <operacion>
 2b4:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <operacion+0x1>
 2b8:	8d 97       	sbiw	r24, 0x2d	; 45
 2ba:	91 f4       	brne	.+36     	; 0x2e0 <__vector_18+0x174>
					envia_cadena (" - ");//envia el caracter - para transformarlo
 2bc:	88 e0       	ldi	r24, 0x08	; 8
 2be:	91 e0       	ldi	r25, 0x01	; 1
 2c0:	0e 94 9c 00 	call	0x138	; 0x138 <envia_cadena>
					Res = A - B;//calcula el resultado de la operacion
 2c4:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <A>
 2c8:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <A+0x1>
 2cc:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <B>
 2d0:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <B+0x1>
 2d4:	82 1b       	sub	r24, r18
 2d6:	93 0b       	sbc	r25, r19
 2d8:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <Res+0x1>
 2dc:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <Res>
				}
				envia_numero (B);//envia el segundo operando para transformarlo
 2e0:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <B>
 2e4:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <B+0x1>
 2e8:	0e 94 66 00 	call	0xcc	; 0xcc <envia_numero>
				envia_cadena (" = ");//envia = para transformarlo
 2ec:	8c e0       	ldi	r24, 0x0C	; 12
 2ee:	91 e0       	ldi	r25, 0x01	; 1
 2f0:	0e 94 9c 00 	call	0x138	; 0x138 <envia_cadena>
				envia_numero (Res);//imprime el resultado de la operacion
 2f4:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <Res>
 2f8:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <Res+0x1>
 2fc:	0e 94 66 00 	call	0xcc	; 0xcc <envia_numero>
				while (!(UCSR0A & 1<<UDRE0));// Asegura buffer vacio
 300:	e0 ec       	ldi	r30, 0xC0	; 192
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	80 81       	ld	r24, Z
 306:	85 ff       	sbrs	r24, 5
 308:	fd cf       	rjmp	.-6      	; 0x304 <__vector_18+0x198>
				UDR0 = '\n' ;				 // Nueva linea
 30a:	8a e0       	ldi	r24, 0x0A	; 10
 30c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
				while (!(UCSR0A & 1<<UDRE0));// Asegura buffer vacio
 310:	e0 ec       	ldi	r30, 0xC0	; 192
 312:	f0 e0       	ldi	r31, 0x00	; 0
 314:	80 81       	ld	r24, Z
 316:	85 ff       	sbrs	r24, 5
 318:	fd cf       	rjmp	.-6      	; 0x314 <__vector_18+0x1a8>
				UDR0 = '\r' ;				 // Comienzo de linea
 31a:	8d e0       	ldi	r24, 0x0D	; 13
 31c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
				A =B=bandera=operacion=0;	 //setea todas las variables ya que mando el resultado
 320:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <operacion+0x1>
 324:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <operacion>
 328:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
 32c:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <B+0x1>
 330:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <B>
 334:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <A+0x1>
 338:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <A>
			}
		}
	}
}
 33c:	ff 91       	pop	r31
 33e:	ef 91       	pop	r30
 340:	bf 91       	pop	r27
 342:	af 91       	pop	r26
 344:	9f 91       	pop	r25
 346:	8f 91       	pop	r24
 348:	7f 91       	pop	r23
 34a:	6f 91       	pop	r22
 34c:	5f 91       	pop	r21
 34e:	4f 91       	pop	r20
 350:	3f 91       	pop	r19
 352:	2f 91       	pop	r18
 354:	0f 90       	pop	r0
 356:	0f be       	out	0x3f, r0	; 63
 358:	0f 90       	pop	r0
 35a:	1f 90       	pop	r1
 35c:	18 95       	reti

0000035e <__umulhisi3>:
 35e:	a2 9f       	mul	r26, r18
 360:	b0 01       	movw	r22, r0
 362:	b3 9f       	mul	r27, r19
 364:	c0 01       	movw	r24, r0
 366:	a3 9f       	mul	r26, r19
 368:	70 0d       	add	r23, r0
 36a:	81 1d       	adc	r24, r1
 36c:	11 24       	eor	r1, r1
 36e:	91 1d       	adc	r25, r1
 370:	b2 9f       	mul	r27, r18
 372:	70 0d       	add	r23, r0
 374:	81 1d       	adc	r24, r1
 376:	11 24       	eor	r1, r1
 378:	91 1d       	adc	r25, r1
 37a:	08 95       	ret

0000037c <_exit>:
 37c:	f8 94       	cli

0000037e <__stop_program>:
 37e:	ff cf       	rjmp	.-2      	; 0x37e <__stop_program>
