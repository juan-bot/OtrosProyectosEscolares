
contador7Seg_Interrupciones.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000019e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000012a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000019e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000019e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000752  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000654  00000000  00000000  00000992  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000028c  00000000  00000000  00000fe6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000006c  00000000  00000000  00001274  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ad  00000000  00000000  000012e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000142  00000000  00000000  0000168d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  000017cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 39 00 	jmp	0x72	; 0x72 <__ctors_end>
   4:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__vector_1>
   8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__vector_2>
   c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  5c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  60:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  64:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	3f 06       	cpc	r3, r31
  6a:	5b 4f       	sbci	r21, 0xFB	; 251
  6c:	66 6d       	ori	r22, 0xD6	; 214
  6e:	7d 07       	cpc	r23, r29
  70:	7f 67       	ori	r23, 0x7F	; 127

00000072 <__ctors_end>:
  72:	11 24       	eor	r1, r1
  74:	1f be       	out	0x3f, r1	; 63
  76:	cf ef       	ldi	r28, 0xFF	; 255
  78:	d8 e0       	ldi	r29, 0x08	; 8
  7a:	de bf       	out	0x3e, r29	; 62
  7c:	cd bf       	out	0x3d, r28	; 61

0000007e <__do_clear_bss>:
  7e:	21 e0       	ldi	r18, 0x01	; 1
  80:	a0 e0       	ldi	r26, 0x00	; 0
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	a1 30       	cpi	r26, 0x01	; 1
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 85 00 	call	0x10a	; 0x10a <main>
  92:	0c 94 93 00 	jmp	0x126	; 0x126 <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <__vector_1>:
#include <avr/pgmspace.h>

const uint8_t tabla [] PROGMEM ={0X3F,0X06,0X5B,0X4F,0X66,0X6D,0X7D,0X07,0X7F,0X67};
uint8_t Conta=0;

ISR(INT0_vect){
  9a:	1f 92       	push	r1
  9c:	0f 92       	push	r0
  9e:	0f b6       	in	r0, 0x3f	; 63
  a0:	0f 92       	push	r0
  a2:	11 24       	eor	r1, r1
  a4:	ef 93       	push	r30
  a6:	ff 93       	push	r31
	Conta = (Conta <9)? Conta +1: 0;
  a8:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <_edata>
  ac:	e9 30       	cpi	r30, 0x09	; 9
  ae:	10 f4       	brcc	.+4      	; 0xb4 <__vector_1+0x1a>
  b0:	ef 5f       	subi	r30, 0xFF	; 255
  b2:	01 c0       	rjmp	.+2      	; 0xb6 <__vector_1+0x1c>
  b4:	e0 e0       	ldi	r30, 0x00	; 0
  b6:	e0 93 00 01 	sts	0x0100, r30	; 0x800100 <_edata>
	PORTB = pgm_read_byte(&tabla[Conta]);
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	e8 59       	subi	r30, 0x98	; 152
  be:	ff 4f       	sbci	r31, 0xFF	; 255
  c0:	e4 91       	lpm	r30, Z
  c2:	e5 b9       	out	0x05, r30	; 5
} 
  c4:	ff 91       	pop	r31
  c6:	ef 91       	pop	r30
  c8:	0f 90       	pop	r0
  ca:	0f be       	out	0x3f, r0	; 63
  cc:	0f 90       	pop	r0
  ce:	1f 90       	pop	r1
  d0:	18 95       	reti

000000d2 <__vector_2>:
ISR(INT1_vect){
  d2:	1f 92       	push	r1
  d4:	0f 92       	push	r0
  d6:	0f b6       	in	r0, 0x3f	; 63
  d8:	0f 92       	push	r0
  da:	11 24       	eor	r1, r1
  dc:	ef 93       	push	r30
  de:	ff 93       	push	r31
	Conta = (Conta > 0)? Conta-1: 9;
  e0:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <_edata>
  e4:	ee 23       	and	r30, r30
  e6:	11 f0       	breq	.+4      	; 0xec <__vector_2+0x1a>
  e8:	e1 50       	subi	r30, 0x01	; 1
  ea:	01 c0       	rjmp	.+2      	; 0xee <__vector_2+0x1c>
  ec:	e9 e0       	ldi	r30, 0x09	; 9
  ee:	e0 93 00 01 	sts	0x0100, r30	; 0x800100 <_edata>
	PORTB = pgm_read_byte(&tabla[Conta]);
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	e8 59       	subi	r30, 0x98	; 152
  f6:	ff 4f       	sbci	r31, 0xFF	; 255
  f8:	e4 91       	lpm	r30, Z
  fa:	e5 b9       	out	0x05, r30	; 5
}
  fc:	ff 91       	pop	r31
  fe:	ef 91       	pop	r30
 100:	0f 90       	pop	r0
 102:	0f be       	out	0x3f, r0	; 63
 104:	0f 90       	pop	r0
 106:	1f 90       	pop	r1
 108:	18 95       	reti

0000010a <main>:
int main(void){
	DDRD = 0X00;
 10a:	1a b8       	out	0x0a, r1	; 10
	PORTD = 0XFF;
 10c:	8f ef       	ldi	r24, 0xFF	; 255
 10e:	8b b9       	out	0x0b, r24	; 11
	DDRB = 0XFF;
 110:	84 b9       	out	0x04, r24	; 4
	EICRA = 0X0A;
 112:	8a e0       	ldi	r24, 0x0A	; 10
 114:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
	EIMSK = 0X03;
 118:	83 e0       	ldi	r24, 0x03	; 3
 11a:	8d bb       	out	0x1d, r24	; 29
	PORTB = 0X3F;
 11c:	8f e3       	ldi	r24, 0x3F	; 63
 11e:	85 b9       	out	0x05, r24	; 5
	sei();
 120:	78 94       	sei
    while (1) {
		asm("NOP");
 122:	00 00       	nop
 124:	fe cf       	rjmp	.-4      	; 0x122 <main+0x18>

00000126 <_exit>:
 126:	f8 94       	cli

00000128 <__stop_program>:
 128:	ff cf       	rjmp	.-2      	; 0x128 <__stop_program>
