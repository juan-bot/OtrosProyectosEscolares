
Afinador.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000023e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000002b2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006ae  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000061f  00000000  00000000  000009fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000337  00000000  00000000  00001019  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  00001350  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000035d  00000000  00000000  00001398  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  000016f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000173e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_4>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 05 01 	call	0x20a	; 0x20a <main>
  88:	0c 94 1d 01 	jmp	0x23a	; 0x23a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_4>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include <avr/pgmspace.h>
int bandera=0;
ISR(PCINT1_vect) { // Cambios en el Puerto C
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25

	if (!(PINC & 0x01 )) { // Boton presionado
  9e:	30 99       	sbic	0x06, 0	; 6
  a0:	1a c0       	rjmp	.+52     	; 0xd6 <__vector_4+0x46>
		if(bandera==0){
  a2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  a6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  aa:	89 2b       	or	r24, r25
  ac:	81 f4       	brne	.+32     	; 0xce <__vector_4+0x3e>
			TCCR1B = 0x09 ; // Modo 4 (CTC) , reloj sin preescala
  ae:	89 e0       	ldi	r24, 0x09	; 9
  b0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
			OCR1A = 379; // Valor de recarga
  b4:	8b e7       	ldi	r24, 0x7B	; 123
  b6:	91 e0       	ldi	r25, 0x01	; 1
  b8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
  bc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
			bandera=1;
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  c8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  cc:	97 c0       	rjmp	.+302    	; 0x1fc <__vector_4+0x16c>
		}
		else{
			PORTB = 0x00 ; // Sin carga
  ce:	15 b8       	out	0x05, r1	; 5
			TCCR1B = 0x00 ; // Sin reloj
  d0:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
  d4:	93 c0       	rjmp	.+294    	; 0x1fc <__vector_4+0x16c>
		}
		
	}
	else if (!(PINC & 0x02 )) { // Boton presionado
  d6:	31 99       	sbic	0x06, 1	; 6
  d8:	1a c0       	rjmp	.+52     	; 0x10e <__vector_4+0x7e>
		if(bandera==0){
  da:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  de:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  e2:	89 2b       	or	r24, r25
  e4:	81 f4       	brne	.+32     	; 0x106 <__vector_4+0x76>
			TCCR1B = 0x09 ; // Modo 4 (CTC) , reloj sin preescala
  e6:	89 e0       	ldi	r24, 0x09	; 9
  e8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
			OCR1A = 506; // Valor de recarga
  ec:	8a ef       	ldi	r24, 0xFA	; 250
  ee:	91 e0       	ldi	r25, 0x01	; 1
  f0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
  f4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
			bandera=1;
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 100:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 104:	7b c0       	rjmp	.+246    	; 0x1fc <__vector_4+0x16c>
		}
		else{
			PORTB = 0x00 ; // Sin carga
 106:	15 b8       	out	0x05, r1	; 5
			TCCR1B = 0x00 ; // Sin reloj
 108:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
 10c:	77 c0       	rjmp	.+238    	; 0x1fc <__vector_4+0x16c>
		}
		
	}
	else if (!(PINC & 0x04 )) { // Boton presionado
 10e:	32 99       	sbic	0x06, 2	; 6
 110:	1a c0       	rjmp	.+52     	; 0x146 <__vector_4+0xb6>
		if(bandera==0){
 112:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 116:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 11a:	89 2b       	or	r24, r25
 11c:	81 f4       	brne	.+32     	; 0x13e <__vector_4+0xae>
			TCCR1B = 0x09 ; // Modo 4 (CTC) , reloj sin preescala
 11e:	89 e0       	ldi	r24, 0x09	; 9
 120:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
			OCR1A = 638; // Valor de recarga
 124:	8e e7       	ldi	r24, 0x7E	; 126
 126:	92 e0       	ldi	r25, 0x02	; 2
 128:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 12c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
			bandera=1;
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 138:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 13c:	5f c0       	rjmp	.+190    	; 0x1fc <__vector_4+0x16c>
		}
		else{
			PORTB = 0x00 ; // Sin carga
 13e:	15 b8       	out	0x05, r1	; 5
			TCCR1B = 0x00 ; // Sin reloj
 140:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
 144:	5b c0       	rjmp	.+182    	; 0x1fc <__vector_4+0x16c>
		}
		
	}
	else if (!(PINC & 0x08 )) { // Boton presionado
 146:	33 99       	sbic	0x06, 3	; 6
 148:	1a c0       	rjmp	.+52     	; 0x17e <__vector_4+0xee>
		if(bandera==0){
 14a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 14e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 152:	89 2b       	or	r24, r25
 154:	81 f4       	brne	.+32     	; 0x176 <__vector_4+0xe6>
			TCCR1B = 0x09 ; // Modo 4 (CTC) , reloj sin preescala
 156:	89 e0       	ldi	r24, 0x09	; 9
 158:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
			OCR1A = 852; // Valor de recarga
 15c:	84 e5       	ldi	r24, 0x54	; 84
 15e:	93 e0       	ldi	r25, 0x03	; 3
 160:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 164:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
			bandera=1;
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 170:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 174:	43 c0       	rjmp	.+134    	; 0x1fc <__vector_4+0x16c>
		}
		else{
			PORTB = 0x00 ; // Sin carga
 176:	15 b8       	out	0x05, r1	; 5
			TCCR1B = 0x00 ; // Sin reloj
 178:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
 17c:	3f c0       	rjmp	.+126    	; 0x1fc <__vector_4+0x16c>
		}
		
	}
	else if (!(PINC & 0x10 )) { // Boton presionado
 17e:	34 99       	sbic	0x06, 4	; 6
 180:	1a c0       	rjmp	.+52     	; 0x1b6 <__vector_4+0x126>
		if(bandera==0){
 182:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 186:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 18a:	89 2b       	or	r24, r25
 18c:	81 f4       	brne	.+32     	; 0x1ae <__vector_4+0x11e>
			TCCR1B = 0x09 ; // Modo 4 (CTC) , reloj sin preescala
 18e:	89 e0       	ldi	r24, 0x09	; 9
 190:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
			OCR1A = 1136; // Valor de recarga
 194:	80 e7       	ldi	r24, 0x70	; 112
 196:	94 e0       	ldi	r25, 0x04	; 4
 198:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 19c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
			bandera=1;
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 1a8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 1ac:	27 c0       	rjmp	.+78     	; 0x1fc <__vector_4+0x16c>
		}
		else{
			PORTB = 0x00 ; // Sin carga
 1ae:	15 b8       	out	0x05, r1	; 5
			TCCR1B = 0x00 ; // Sin reloj
 1b0:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
 1b4:	23 c0       	rjmp	.+70     	; 0x1fc <__vector_4+0x16c>
		}
		
	}
	else if (!(PINC & 0x20 )) { // Boton presionado
 1b6:	35 99       	sbic	0x06, 5	; 6
 1b8:	1a c0       	rjmp	.+52     	; 0x1ee <__vector_4+0x15e>
		if(bandera==0){
 1ba:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1be:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 1c2:	89 2b       	or	r24, r25
 1c4:	81 f4       	brne	.+32     	; 0x1e6 <__vector_4+0x156>
			TCCR1B = 0x09 ; // Modo 4 (CTC) , reloj sin preescala
 1c6:	89 e0       	ldi	r24, 0x09	; 9
 1c8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
			OCR1A = 1517; // Valor de recarga
 1cc:	8d ee       	ldi	r24, 0xED	; 237
 1ce:	95 e0       	ldi	r25, 0x05	; 5
 1d0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 1d4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
			bandera=1;
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 1e0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 1e4:	0b c0       	rjmp	.+22     	; 0x1fc <__vector_4+0x16c>
		}
		else{
			PORTB = 0x00 ; // Sin carga
 1e6:	15 b8       	out	0x05, r1	; 5
			TCCR1B = 0x00 ; // Sin reloj
 1e8:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
 1ec:	07 c0       	rjmp	.+14     	; 0x1fc <__vector_4+0x16c>
		}
		
	}

	else { // Botones liberados
		bandera=0;
 1ee:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 1f2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
		PORTB = 0x00 ; // Sin carga
 1f6:	15 b8       	out	0x05, r1	; 5
		TCCR1B = 0x00 ; // Sin reloj
 1f8:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	}

}
 1fc:	9f 91       	pop	r25
 1fe:	8f 91       	pop	r24
 200:	0f 90       	pop	r0
 202:	0f be       	out	0x3f, r0	; 63
 204:	0f 90       	pop	r0
 206:	1f 90       	pop	r1
 208:	18 95       	reti

0000020a <main>:
int main() {
	DDRC = 0x00 ; // Entrada para los botones
 20a:	17 b8       	out	0x07, r1	; 7
	PORTC = 0x3F ; // Pull?up
 20c:	8f e3       	ldi	r24, 0x3F	; 63
 20e:	88 b9       	out	0x08, r24	; 8
	DDRB = 0xFF; // Salida para OC1A
 210:	9f ef       	ldi	r25, 0xFF	; 255
 212:	94 b9       	out	0x04, r25	; 4
	PCMSK1 = 0x3F ; // Mascara para los seis botones
 214:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__DATA_REGION_ORIGIN__+0xc>
	PCICR = 0x02 ; // Habilita la interrupcion
 218:	82 e0       	ldi	r24, 0x02	; 2
 21a:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
	// Configuracion del temporizador 1
	OCR1A = 0x00; // Valor de recarga
 21e:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 222:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	TCCR1A = 0x40 ; // Respuesta automatica
 226:	80 e4       	ldi	r24, 0x40	; 64
 228:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	TCCR1B = 0x00 ; // Inicia sin reloj
 22c:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	TCCR1C = 0x00 ; 
 230:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__DATA_REGION_ORIGIN__+0x22>
	sei (); // Habilitador global de interrupciones
 234:	78 94       	sei
	while (1) {// Lazo infinito , permanece ocioso a
		asm("NOP" );
 236:	00 00       	nop
 238:	fe cf       	rjmp	.-4      	; 0x236 <main+0x2c>

0000023a <_exit>:
 23a:	f8 94       	cli

0000023c <__stop_program>:
 23c:	ff cf       	rjmp	.-2      	; 0x23c <__stop_program>
