
ServomotorDosBotones.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000018a  000001fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000018a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000230  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006c5  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000621  00000000  00000000  00000965  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000268  00000000  00000000  00000f86  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000007c  00000000  00000000  000011f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000037f  00000000  00000000  0000126c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ac  00000000  00000000  000015eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001697  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__vector_1>
   8:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__vector_2>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e8       	ldi	r30, 0x8A	; 138
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 a5 00 	call	0x14a	; 0x14a <main>
  8e:	0c 94 c3 00 	jmp	0x186	; 0x186 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <__vector_1>:
#define F_CPU 1000000UL
#include <avr/io.h>
#include <avr/interrupt.h>
 int grados=1499;
ISR(INT0_vect){
  96:	1f 92       	push	r1
  98:	0f 92       	push	r0
  9a:	0f b6       	in	r0, 0x3f	; 63
  9c:	0f 92       	push	r0
  9e:	11 24       	eor	r1, r1
  a0:	2f 93       	push	r18
  a2:	8f 93       	push	r24
  a4:	9f 93       	push	r25
	if(grados==899)
  a6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  aa:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
  ae:	83 38       	cpi	r24, 0x83	; 131
  b0:	23 e0       	ldi	r18, 0x03	; 3
  b2:	92 07       	cpc	r25, r18
  b4:	39 f4       	brne	.+14     	; 0xc4 <__vector_1+0x2e>
		grados=2099;
  b6:	83 e3       	ldi	r24, 0x33	; 51
  b8:	98 e0       	ldi	r25, 0x08	; 8
  ba:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
  be:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
  c2:	06 c0       	rjmp	.+12     	; 0xd0 <__vector_1+0x3a>
	else
		grados=grados-100;
  c4:	84 56       	subi	r24, 0x64	; 100
  c6:	91 09       	sbc	r25, r1
  c8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
  cc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	OCR1A = grados; 
  d0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  d4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
  d8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
  dc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
}
  e0:	9f 91       	pop	r25
  e2:	8f 91       	pop	r24
  e4:	2f 91       	pop	r18
  e6:	0f 90       	pop	r0
  e8:	0f be       	out	0x3f, r0	; 63
  ea:	0f 90       	pop	r0
  ec:	1f 90       	pop	r1
  ee:	18 95       	reti

000000f0 <__vector_2>:
ISR(INT1_vect){
  f0:	1f 92       	push	r1
  f2:	0f 92       	push	r0
  f4:	0f b6       	in	r0, 0x3f	; 63
  f6:	0f 92       	push	r0
  f8:	11 24       	eor	r1, r1
  fa:	2f 93       	push	r18
  fc:	8f 93       	push	r24
  fe:	9f 93       	push	r25
	if(grados==2099)
 100:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 104:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 108:	83 33       	cpi	r24, 0x33	; 51
 10a:	28 e0       	ldi	r18, 0x08	; 8
 10c:	92 07       	cpc	r25, r18
 10e:	39 f4       	brne	.+14     	; 0x11e <__vector_2+0x2e>
		grados=899;
 110:	83 e8       	ldi	r24, 0x83	; 131
 112:	93 e0       	ldi	r25, 0x03	; 3
 114:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 118:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 11c:	06 c0       	rjmp	.+12     	; 0x12a <__vector_2+0x3a>
	else
		grados=grados+100;
 11e:	8c 59       	subi	r24, 0x9C	; 156
 120:	9f 4f       	sbci	r25, 0xFF	; 255
 122:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 126:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	OCR1A = grados; 
 12a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 12e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 132:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 136:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
}
 13a:	9f 91       	pop	r25
 13c:	8f 91       	pop	r24
 13e:	2f 91       	pop	r18
 140:	0f 90       	pop	r0
 142:	0f be       	out	0x3f, r0	; 63
 144:	0f 90       	pop	r0
 146:	1f 90       	pop	r1
 148:	18 95       	reti

0000014a <main>:
int main(void){
	DDRB = 0xFF; // Salida en OC1A (PB1)
 14a:	8f ef       	ldi	r24, 0xFF	; 255
 14c:	84 b9       	out	0x04, r24	; 4
	EICRA = 0X0A;
 14e:	8a e0       	ldi	r24, 0x0A	; 10
 150:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
	EIMSK = 0X03;
 154:	83 e0       	ldi	r24, 0x03	; 3
 156:	8d bb       	out	0x1d, r24	; 29
	ICR1 = 19999; // Valor maaximo 
 158:	8f e1       	ldi	r24, 0x1F	; 31
 15a:	9e e4       	ldi	r25, 0x4E	; 78
 15c:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>
 160:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
	TCCR1A = 0x82 ; // PWM raapido con modo no invertido
 164:	82 e8       	ldi	r24, 0x82	; 130
 166:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	TCCR1B = 0x19 ; // Reloj sin preescalador
 16a:	89 e1       	ldi	r24, 0x19	; 25
 16c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	TCCR1C = 0x00 ;
 170:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__DATA_REGION_ORIGIN__+0x22>
	OCR1A = 1499; // 90 grados
 174:	8b ed       	ldi	r24, 0xDB	; 219
 176:	95 e0       	ldi	r25, 0x05	; 5
 178:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 17c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	sei();
 180:	78 94       	sei
	while(1) {
		asm("NOP");
 182:	00 00       	nop
 184:	fe cf       	rjmp	.-4      	; 0x182 <main+0x38>

00000186 <_exit>:
 186:	f8 94       	cli

00000188 <__stop_program>:
 188:	ff cf       	rjmp	.-2      	; 0x188 <__stop_program>
