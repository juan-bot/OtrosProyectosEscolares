
DAC_USART_SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000018c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800100  00800100  00000200  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000230  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000721  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000065f  00000000  00000000  000009b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000029a  00000000  00000000  00001018  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000005c  00000000  00000000  000012b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000393  00000000  00000000  00001310  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ee  00000000  00000000  000016a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001791  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a5 30       	cpi	r26, 0x05	; 5
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 8e 00 	call	0x11c	; 0x11c <main>
  88:	0c 94 c4 00 	jmp	0x188	; 0x188 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_18>:
#include <avr/interrupt.h>

uint16_t  A=0,aux2=0; //declaracion de variables globales
uint8_t bandera = 0;

ISR(USART_RX_vect){
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	2f 93       	push	r18
  9c:	3f 93       	push	r19
  9e:	4f 93       	push	r20
  a0:	5f 93       	push	r21
  a2:	8f 93       	push	r24
  a4:	9f 93       	push	r25
	
	uint16_t dato;
	dato = UDR0; //recibo el dato transferido en una variable
  a6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  aa:	90 e0       	ldi	r25, 0x00	; 0
	
	if (dato >= 0x30 && dato <= 0x39) //encontro un numero
  ac:	9c 01       	movw	r18, r24
  ae:	20 53       	subi	r18, 0x30	; 48
  b0:	31 09       	sbc	r19, r1
  b2:	2a 30       	cpi	r18, 0x0A	; 10
  b4:	31 05       	cpc	r19, r1
  b6:	b8 f4       	brcc	.+46     	; 0xe6 <__vector_18+0x56>
	A = (A*10) + (dato-0x30 );	//transforma los caracteres a un numero
  b8:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <A>
  bc:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <A+0x1>
  c0:	a9 01       	movw	r20, r18
  c2:	44 0f       	add	r20, r20
  c4:	55 1f       	adc	r21, r21
  c6:	22 0f       	add	r18, r18
  c8:	33 1f       	adc	r19, r19
  ca:	22 0f       	add	r18, r18
  cc:	33 1f       	adc	r19, r19
  ce:	22 0f       	add	r18, r18
  d0:	33 1f       	adc	r19, r19
  d2:	24 0f       	add	r18, r20
  d4:	35 1f       	adc	r19, r21
  d6:	28 0f       	add	r18, r24
  d8:	39 1f       	adc	r19, r25
  da:	20 53       	subi	r18, 0x30	; 48
  dc:	31 09       	sbc	r19, r1
  de:	30 93 04 01 	sts	0x0104, r19	; 0x800104 <A+0x1>
  e2:	20 93 03 01 	sts	0x0103, r18	; 0x800103 <A>

	if(dato==0X0D){
  e6:	0d 97       	sbiw	r24, 0x0d	; 13
  e8:	71 f4       	brne	.+28     	; 0x106 <__vector_18+0x76>
		aux2=A;
  ea:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <A>
  ee:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <A+0x1>
  f2:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <aux2+0x1>
  f6:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <aux2>
		A=0;
  fa:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <A+0x1>
  fe:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <A>
		bandera=0;
 102:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	}
}
 106:	9f 91       	pop	r25
 108:	8f 91       	pop	r24
 10a:	5f 91       	pop	r21
 10c:	4f 91       	pop	r20
 10e:	3f 91       	pop	r19
 110:	2f 91       	pop	r18
 112:	0f 90       	pop	r0
 114:	0f be       	out	0x3f, r0	; 63
 116:	0f 90       	pop	r0
 118:	1f 90       	pop	r1
 11a:	18 95       	reti

0000011c <main>:
int main(){
	
	uint16_t aux=0;
	uint8_t high , low , extra ;
	
	DDRD = 0x00 ; // Entrada para el interruptor
 11c:	1a b8       	out	0x0a, r1	; 10
	
	DDRB = 0x2C; // MOSI, SCK y SS como salidas
 11e:	8c e2       	ldi	r24, 0x2C	; 44
 120:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x04 ; // SS en alto , esclavo deshabilitado
 122:	84 e0       	ldi	r24, 0x04	; 4
 124:	85 b9       	out	0x05, r24	; 5
	
	SPCR = 0x50 ; // Habilita la interfaz SPI como Maestro
 126:	80 e5       	ldi	r24, 0x50	; 80
 128:	8c bd       	out	0x2c, r24	; 44
	SPSR = 0x01 ; // Ajustando para 500 KHz
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	8d bd       	out	0x2d, r24	; 45
	
	UBRR0 = 103; // Para 9600 bps con el MCU
 12e:	87 e6       	ldi	r24, 0x67	; 103
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 136:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	UCSR0A = 0x00 ; // Asincrono normal
 13a:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
	UCSR0B = 0x98 ; // Habilita receptor
 13e:	88 e9       	ldi	r24, 0x98	; 152
 140:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	UCSR0C = 0x06 ; // Datos de 8 bits , sin paridad y 1 bit de paro
 144:	86 e0       	ldi	r24, 0x06	; 6
 146:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
	
	sei (); // Habilitador global de interrupciones
 14a:	78 94       	sei
	
	while (1) {
		
		if(aux2<=8192){
 14c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <aux2>
 150:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <aux2+0x1>
 154:	81 30       	cpi	r24, 0x01	; 1
 156:	20 e2       	ldi	r18, 0x20	; 32
 158:	92 07       	cpc	r25, r18
 15a:	e0 f7       	brcc	.-8      	; 0x154 <main+0x38>
			aux=aux2;
			low = aux ;
			high = aux >> 8;
			high |= 0x10 ; // DAC encendido
			
			if (aux > 4095)
 15c:	81 15       	cp	r24, r1
 15e:	20 e1       	ldi	r18, 0x10	; 16
 160:	92 07       	cpc	r25, r18
 162:	18 f4       	brcc	.+6      	; 0x16a <main+0x4e>
		
		if(aux2<=8192){
			aux=aux2;
			low = aux ;
			high = aux >> 8;
			high |= 0x10 ; // DAC encendido
 164:	29 2f       	mov	r18, r25
 166:	20 61       	ori	r18, 0x10	; 16
 168:	02 c0       	rjmp	.+4      	; 0x16e <main+0x52>
			
			if (aux > 4095)
			high |= 0x20 ; // Bit de ganancia en alto
 16a:	29 2f       	mov	r18, r25
 16c:	20 63       	ori	r18, 0x30	; 48
			
			PORTB &= 0xFB; // Habilita al esclavo
 16e:	2a 98       	cbi	0x05, 2	; 5
			SPDR = high ; // Envia el byte alto
 170:	2e bd       	out	0x2e, r18	; 46
			while (!(SPSR & 1 << SPIF )); // Espera fin de envio
 172:	0d b4       	in	r0, 0x2d	; 45
 174:	07 fe       	sbrs	r0, 7
 176:	fd cf       	rjmp	.-6      	; 0x172 <main+0x56>
			extra = SPDR; // Para limpiar la bandera SPIF
 178:	9e b5       	in	r25, 0x2e	; 46
			SPDR = low ; // Envia el byte bajo
 17a:	8e bd       	out	0x2e, r24	; 46
			while (!(SPSR & 1 << SPIF )); // Espera fin de envio
 17c:	0d b4       	in	r0, 0x2d	; 45
 17e:	07 fe       	sbrs	r0, 7
 180:	fd cf       	rjmp	.-6      	; 0x17c <main+0x60>
			extra = SPDR; // Para limpiar la bandera SPIF
 182:	8e b5       	in	r24, 0x2e	; 46
			PORTB |= 0x04 ; // Deshabilita al esclavo
 184:	2a 9a       	sbi	0x05, 2	; 5
 186:	e2 cf       	rjmp	.-60     	; 0x14c <main+0x30>

00000188 <_exit>:
 188:	f8 94       	cli

0000018a <__stop_program>:
 18a:	ff cf       	rjmp	.-2      	; 0x18a <__stop_program>
