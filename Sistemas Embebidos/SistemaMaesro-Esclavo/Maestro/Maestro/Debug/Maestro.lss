
Maestro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000150  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000755  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000068a  00000000  00000000  00000999  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000296  00000000  00000000  00001023  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  000012bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000374  00000000  00000000  0000134c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000015b  00000000  00000000  000016c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000181b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__vector_4>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 a6 00 	jmp	0x14c	; 0x14c <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
		}
	}
}

int main() { // Programa principal
	DDRD = 0x00 ; // Entrada de datos 
  80:	1a b8       	out	0x0a, r1	; 10
	DDRB = 0x2F; // MOSI, SCK y SS(s) como salidas 
  82:	8f e2       	ldi	r24, 0x2F	; 47
  84:	84 b9       	out	0x04, r24	; 4
	DDRC = 0x00 ; // Puerto C como entrada 
  86:	17 b8       	out	0x07, r1	; 7
	PORTD = 0xFF; // Pull?up 
  88:	8f ef       	ldi	r24, 0xFF	; 255
  8a:	8b b9       	out	0x0b, r24	; 11
	PORTC = 0x07 ; PORTB = 0x07 ; // Esclavos deshabilitados
  8c:	87 e0       	ldi	r24, 0x07	; 7
  8e:	88 b9       	out	0x08, r24	; 8
  90:	85 b9       	out	0x05, r24	; 5
	SPCR = 0x50 ; // Habilita la interfaz SPI como maestro 
  92:	80 e5       	ldi	r24, 0x50	; 80
  94:	8c bd       	out	0x2c, r24	; 44
	SPSR = 0x01 ; // Ajustando para 500 KHz 
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	8d bd       	out	0x2d, r24	; 45
	PCMSK1 = 0x04 ; // Interrupci´on por cambios en PC2 
  9a:	84 e0       	ldi	r24, 0x04	; 4
  9c:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__DATA_REGION_ORIGIN__+0xc>
	PCICR = 0x02 ; // Habilita la interrupci´on
  a0:	82 e0       	ldi	r24, 0x02	; 2
  a2:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
	sei (); // Habilitador global de interrupciones 
  a6:	78 94       	sei
	while (1) // Lazo infinito 
		asm("NOP");
  a8:	00 00       	nop
  aa:	fe cf       	rjmp	.-4      	; 0xa8 <main+0x28>

000000ac <envia_SPI>:
}
uint8_t envia_SPI ( uint8_t dato , uint8_t esvo ) { 
	uint8_t aux ;
	aux = 1 << esvo ; 
  ac:	21 e0       	ldi	r18, 0x01	; 1
  ae:	30 e0       	ldi	r19, 0x00	; 0
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <envia_SPI+0xa>
  b2:	22 0f       	add	r18, r18
  b4:	33 1f       	adc	r19, r19
  b6:	6a 95       	dec	r22
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <envia_SPI+0x6>
	PORTB &= ~aux ; // Habilita al esclavo 
  ba:	95 b1       	in	r25, 0x05	; 5
  bc:	42 2f       	mov	r20, r18
  be:	40 95       	com	r20
  c0:	94 23       	and	r25, r20
  c2:	95 b9       	out	0x05, r25	; 5
	SPDR = dato ; // Inicia el env´?o 
  c4:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & 1 << SPIF )); // Espera fin de env?o 
  c6:	0d b4       	in	r0, 0x2d	; 45
  c8:	07 fe       	sbrs	r0, 7
  ca:	fd cf       	rjmp	.-6      	; 0xc6 <envia_SPI+0x1a>
	PORTB |= aux ; // Deshabilita al esclavo
  cc:	85 b1       	in	r24, 0x05	; 5
  ce:	28 2b       	or	r18, r24
  d0:	25 b9       	out	0x05, r18	; 5
	return SPDR; // Regresa la respuesta
  d2:	8e b5       	in	r24, 0x2e	; 46
}
  d4:	08 95       	ret

000000d6 <__vector_4>:
#include <avr/io.h> 
#include <avr/interrupt.h>
uint8_t envia_SPI ( uint8_t dato , uint8_t esvo );
ISR(PCINT1_vect) { 
  d6:	1f 92       	push	r1
  d8:	0f 92       	push	r0
  da:	0f b6       	in	r0, 0x3f	; 63
  dc:	0f 92       	push	r0
  de:	11 24       	eor	r1, r1
  e0:	2f 93       	push	r18
  e2:	3f 93       	push	r19
  e4:	4f 93       	push	r20
  e6:	5f 93       	push	r21
  e8:	6f 93       	push	r22
  ea:	7f 93       	push	r23
  ec:	8f 93       	push	r24
  ee:	9f 93       	push	r25
  f0:	af 93       	push	r26
  f2:	bf 93       	push	r27
  f4:	cf 93       	push	r28
  f6:	ef 93       	push	r30
  f8:	ff 93       	push	r31
	uint8_t sel , dato ;
	if ( !(PINC & 0x04) ) { // Boton presionado 
  fa:	32 99       	sbic	0x06, 2	; 6
  fc:	15 c0       	rjmp	.+42     	; 0x128 <__vector_4+0x52>
		sel = PINC & 0x03 ; 
  fe:	66 b1       	in	r22, 0x06	; 6
 100:	63 70       	andi	r22, 0x03	; 3
		dato = PIND;
 102:	c9 b1       	in	r28, 0x09	; 9
		if ( sel < 3)			// Esclavos 0, 1 o 2 
 104:	63 30       	cpi	r22, 0x03	; 3
 106:	20 f4       	brcc	.+8      	; 0x110 <__vector_4+0x3a>
			envia_SPI (dato , sel ); // Env?a el dato 
 108:	8c 2f       	mov	r24, r28
 10a:	0e 94 56 00 	call	0xac	; 0xac <envia_SPI>
 10e:	0c c0       	rjmp	.+24     	; 0x128 <__vector_4+0x52>
		else {					  // Difusion 
			envia_SPI (dato , 0); // Esclavo 0 
 110:	60 e0       	ldi	r22, 0x00	; 0
 112:	8c 2f       	mov	r24, r28
 114:	0e 94 56 00 	call	0xac	; 0xac <envia_SPI>
			envia_SPI (dato , 1); // Esclavo 1 
 118:	61 e0       	ldi	r22, 0x01	; 1
 11a:	8c 2f       	mov	r24, r28
 11c:	0e 94 56 00 	call	0xac	; 0xac <envia_SPI>
			envia_SPI (dato , 2); // Esclavo 2 
 120:	62 e0       	ldi	r22, 0x02	; 2
 122:	8c 2f       	mov	r24, r28
 124:	0e 94 56 00 	call	0xac	; 0xac <envia_SPI>
		}
	}
}
 128:	ff 91       	pop	r31
 12a:	ef 91       	pop	r30
 12c:	cf 91       	pop	r28
 12e:	bf 91       	pop	r27
 130:	af 91       	pop	r26
 132:	9f 91       	pop	r25
 134:	8f 91       	pop	r24
 136:	7f 91       	pop	r23
 138:	6f 91       	pop	r22
 13a:	5f 91       	pop	r21
 13c:	4f 91       	pop	r20
 13e:	3f 91       	pop	r19
 140:	2f 91       	pop	r18
 142:	0f 90       	pop	r0
 144:	0f be       	out	0x3f, r0	; 63
 146:	0f 90       	pop	r0
 148:	1f 90       	pop	r1
 14a:	18 95       	reti

0000014c <_exit>:
 14c:	f8 94       	cli

0000014e <__stop_program>:
 14e:	ff cf       	rjmp	.-2      	; 0x14e <__stop_program>
